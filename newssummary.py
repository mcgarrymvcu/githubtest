# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jCWIbIuCafg-d6UPjDBYjnbxgdt4-hUH
"""

import requests
import openai
import smtplib
from email.mime.text import MIMEText
from datetime import datetime, timedelta

# === üîê CONFIGURATION ===
NEWS_API_KEY = "a7a2d5703db644fbaf8e5eaa6035cdaf"
OPENAI_API_KEY = "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"
GMAIL_ADDRESS = "mcgarry72@gmail.com"
GMAIL_APP_PASSWORD = "tjlvxnfxehglnnol "  # from https://myaccount.google.com/apppasswords
TO_EMAIL = "mcgarrym@vcu.edu"  # Can be the same or different

# === üìÖ GET YESTERDAY'S DATE ===
yesterday_date = datetime.now() - timedelta(days=1)
yesterday_str = yesterday_date.strftime("%Y-%m-%d")
subject_line = f"Daily News Summary ‚Äì AI & Higher Education ({yesterday_str})"

# === üîé BUILD NEWSAPI QUERY ===
query = '("AI" OR "Artificial Intelligence") OR ("higher education" OR "university" OR "college")'
url = (
    "https://newsapi.org/v2/everything?"
    f"q={query}&"
    f"from={yesterday_str}&to={yesterday_str}&"
    "language=en&"
    "sortBy=publishedAt&"
    "searchIn=title&"
    f"apiKey={NEWS_API_KEY}"
)

# === ü§ñ SET UP OPENAI CLIENT ===
client = openai.OpenAI(api_key=OPENAI_API_KEY)

# === üì° FETCH ARTICLES ===
def fetch_news_articles():
    response = requests.get(url)
    data = response.json()
    if data["status"] != "ok":
        raise Exception("NewsAPI error: " + data.get("message", "Unknown error"))
    return data["articles"][:5]  # limit to 5

# === üß† SUMMARIZE WITH OPENAI ===
def summarize_text(text):
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "Summarize this news article in 1‚Äì2 sentences."},
            {"role": "user", "content": text}
        ]
    )
    return response.choices[0].message.content.strip()

# === üì® FORMAT SUMMARY FOR EMAIL ===
def build_email_summary(articles):
    lines = [subject_line, "", f"üìÖ Date: {yesterday_str}", ""]
    for i, article in enumerate(articles, start=1):
        title = article["title"]
        link = article["url"]
        description = article.get("description", "")
        summary = summarize_text(title + "\n\n" + description)
        lines.extend([
            f"üì∞ [{i}] {title}",
            f"üîó {link}",
            f"üß† Summary: {summary}",
            "-" * 80
        ])
    return "\n".join(lines)

# === ‚úâÔ∏è SEND THE EMAIL ===
def send_email(subject, body):
    msg = MIMEText(body, "plain")
    msg["Subject"] = subject
    msg["From"] = GMAIL_ADDRESS
    msg["To"] = TO_EMAIL

    with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
        server.login(GMAIL_ADDRESS, GMAIL_APP_PASSWORD)
        server.send_message(msg)

    print("‚úÖ Email sent.")

# === üöÄ MAIN ===
def main():
    print(f"‚è≥ Fetching articles for {yesterday_str}...")
    articles = fetch_news_articles()
    if not articles:
        print("‚ö†Ô∏è No articles found for yesterday.")
        return
    email_body = build_email_summary(articles)
    send_email(subject_line, email_body)

if __name__ == "__main__":
    main()